// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
var e,r;e=this,r=function(e){"use strict";var r="function"==typeof Object.defineProperty?Object.defineProperty:null,t=Object.defineProperty,n=Object.prototype,o=n.toString,a=n.__defineGetter__,i=n.__defineSetter__,u=n.__lookupGetter__,l=n.__lookupSetter__,f=function(){try{return r({},"x",{}),!0}catch(e){return!1}}()?t:function(e,r,t){var f,c,_,d;if("object"!=typeof e||null===e||"[object Array]"===o.call(e))throw new TypeError("invalid argument. First argument must be an object. Value: `"+e+"`.");if("object"!=typeof t||null===t||"[object Array]"===o.call(t))throw new TypeError("invalid argument. Property descriptor must be an object. Value: `"+t+"`.");if((c="value"in t)&&(u.call(e,r)||l.call(e,r)?(f=e.__proto__,e.__proto__=n,delete e[r],e[r]=t.value,e.__proto__=f):e[r]=t.value),_="get"in t,d="set"in t,c&&(_||d))throw new Error("invalid argument. Cannot specify one or more accessors and a value or writable attribute in the property descriptor.");return _&&a&&a.call(e,r,t.get),d&&i&&i.call(e,r,t.set),e};function c(e,r,t){f(e,r,{configurable:!1,enumerable:!1,writable:!1,value:t})}function _(e){return Math.abs(e)}function d(e,r,t,n){var o,a,i,u,l,f;if(e<=0)return 0;if(1===e||0===n)return r+t[0];for(a=n<0?(1-e)*n:0,o=0,l=0,f=0;f<e;f++)u=o+(i=r+t[a]),_(o)>=_(i)?l+=o-u+i:l+=i-u+o,o=u,a+=n;return o+l}function p(e,r,t,n,o){var a,i,u,l,f,c;if(e<=0)return 0;if(1===e||0===n)return r+t[o];for(i=o,a=0,f=0,c=0;c<e;c++)l=a+(u=r+t[i]),_(a)>=_(u)?f+=a-l+u:f+=u-l+a,a=l,i+=n;return a+f}function y(e,r,t,n,o){return p(e,r,t,n,o)}function b(e,r,t){var n;return e<=0?NaN:1===e||0===t?r[0]:r[n=t<0?(1-e)*t:0]+y(e-1,-r[n],r,t,n+t)/e}function s(e,r,t,n){return e<=0?NaN:1===e||0===t?r[n]:r[n]+y(e-1,-r[n],r,t,n+t)/e}c(d,"ndarray",p),c((function(e,r,t,n){return d(e,r,t,n)}),"ndarray",y),c(b,"ndarray",s),e.default=b,e.ndarray=s,Object.defineProperty(e,"__esModule",{value:!0})},"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e="undefined"!=typeof globalThis?globalThis:e||self).dmeanli={});
//# sourceMappingURL=browser.js.map
